// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PixelSDK
import AVFoundation
import AudioToolbox
import CommonCrypto
import CoreLocation
import CoreMotion
import Foundation
import GPUImage
import MediaPlayer
import Metal
import MobileCoreServices
import Photos
import PhotosUI
@_exported import PixelSDK
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers open class SessionFilterToon : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterGaussianBlur : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSepiaTone : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSepulveda : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterMontana : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterStretchDistortion : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SessionManager : ObjectiveC.NSObject {
  @objc public static let shared: SessionManager
  @objc public var savedSessions: [Session] {
    get
  }
  @objc public var didRestoreSavedSessions: Swift.Bool {
    get
  }
  @objc public static let DidRestoreSavedSessionsNotification: Foundation.Notification.Name
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterEdgeDetection : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SessionFilterEdgeDetection")
open class SessionFilterCannyEdgeDetection : SessionFilterEdgeDetection {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSwirl : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc public protocol EditControllerDelegate {
  @objc optional func editController(_ editController: EditController, didLoadEditing session: Session)
  @objc optional func editController(_ editController: EditController, willBeginEditing session: Session)
  @objc optional func editController(_ editController: EditController, didBeginEditing session: Session)
  @objc func editController(_ editController: EditController, didFinishEditing session: Session)
  @objc optional func editController(_ editController: EditController, didCancelEditing session: Session?)
}
public enum EditMode : Swift.Equatable {
  case filter
  case trim
  case adjust
  case custom(title: Swift.String, controller: UIKit.UIViewController)
  public static func == (lhs: EditMode, rhs: EditMode) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class EditController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(session: Session)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) final public let session: Session
  @_Concurrency.MainActor(unsafe) public var modes: [EditMode] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentMode: EditMode {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: EditControllerDelegate? {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var backButton: UIKit.UIButton! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var nextButton: UIKit.UIButton! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var showsSaveDialogue: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var showsPositionAdjustment: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var compactControls: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
extension EditController : TopBarProvider {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredTopBarView: UIKit.UIView? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setNeedsTopBarAppearanceUpdate()
}
extension EditController : BottomBarProvider {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var prefersBottomBarHidden: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredBottomBarView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var preferredBottomBarUpdateAnimation: BottomBarAnimation {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setNeedsBottomBarAppearanceUpdate()
}
@_inheritsConvenienceInitializers open class SessionFilterStraighten : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterBulge : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterHighlights : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterPixellate : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSketch : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
extension CoreLocation.CLLocation : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers open class SessionFilterVibrance : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterFalseColor : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterBrightness : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
public enum VideoExporterError : Swift.Error, Swift.CustomStringConvertible {
  case cancelled
  case watermarked
  case backgroundState
  case metalSupport
  case destroyed
  case internalError(Swift.Error)
  public var errorDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers public class VideoExporter {
  public static let shared: VideoExporter
  @objc public var isExporting: Swift.Bool {
    @objc get
  }
  public func export(video: SessionVideo, fileType: AVFoundation.AVFileType = .mp4, videoEncodingSettings: [Swift.String : Any]? = nil, audioEncodingSettings: [Swift.String : Any]? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil, completion: @escaping (VideoExporterError?) -> Swift.Void)
  public func export(videos: [SessionVideo], fileType: AVFoundation.AVFileType = .mp4, videoEncodingSettings: [Swift.String : Any]? = nil, audioEncodingSettings: [Swift.String : Any]? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil, completion: @escaping (VideoExporterError?) -> Swift.Void)
  public func export(segment: SessionVideoSegment, fileType: AVFoundation.AVFileType = .mp4, videoEncodingSettings: [Swift.String : Any]? = nil, audioEncodingSettings: [Swift.String : Any]? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil, completion: @escaping (VideoExporterError?) -> Swift.Void)
  public func export(segments: [SessionVideoSegment], fileType: AVFoundation.AVFileType = .mp4, videoEncodingSettings: [Swift.String : Any]? = nil, audioEncodingSettings: [Swift.String : Any]? = nil, progress: ((Swift.Double) -> Swift.Void)? = nil, completion: @escaping (VideoExporterError?) -> Swift.Void)
  @objc public func cancelExport(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
@objc public protocol ContainerControllerDelegate {
  @objc optional func containerControllerDidChangeMode(_ containerController: ContainerController)
  @objc optional func containerControllerDidCancel(_ containerController: ContainerController)
  @objc optional func containerController(_ containerController: ContainerController, willShowEditController editController: EditController, withSession session: Session)
}
public enum ContainerMode : Swift.Equatable {
  case video
  case photo
  case library
  case custom(title: Swift.String, controller: UIKit.UIViewController)
  public static func == (lhs: ContainerMode, rhs: ContainerMode) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ContainerController : UIKit.UIViewController {
  @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(mode: ContainerMode)
  @_Concurrency.MainActor(unsafe) convenience public init(modes: [ContainerMode])
  @_Concurrency.MainActor(unsafe) public init(modes: [ContainerMode], initialMode: ContainerMode, restoresPreviousMode: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public var modes: [ContainerMode] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentMode: ContainerMode {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: ContainerControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) weak public var editControllerDelegate: EditControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var cameraController: CameraController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var libraryController: LibraryController {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var childForStatusBarStyle: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
extension ContainerController : BottomBarProvider {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var prefersBottomBarHidden: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredBottomBarView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var preferredBottomBarUpdateAnimation: BottomBarAnimation {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setNeedsBottomBarAppearanceUpdate()
}
extension UIKit.UIColor : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public enum BottomBarAnimation {
  case slide
  case none
  public static func == (a: BottomBarAnimation, b: BottomBarAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BottomBarProvider {
  var prefersBottomBarHidden: Swift.Bool { get }
  var preferredBottomBarView: UIKit.UIView? { get }
  var preferredBottomBarUpdateAnimation: BottomBarAnimation { get }
  func setNeedsBottomBarAppearanceUpdate()
}
extension BottomBarProvider {
  public var prefersBottomBarHidden: Swift.Bool {
    get
  }
  public var preferredBottomBarView: UIKit.UIView? {
    get
  }
  public var preferredBottomBarUpdateAnimation: BottomBarAnimation {
    get
  }
}
extension BottomBarProvider where Self : UIKit.UIViewController {
  public func setNeedsBottomBarAppearanceUpdate()
}
@_inheritsConvenienceInitializers open class SessionFilterCGAColorspace : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SessionImage : ObjectiveC.NSObject, Swift.Codable {
  @objc public var naturalSize: CoreGraphics.CGSize {
    get
  }
  @objc public var actualSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc public var renderSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc public var preferredTransform: CoreGraphics.CGAffineTransform {
    @objc get
    @objc set
  }
  public var cropRect: CoreGraphics.CGRect? {
    get
    set
  }
  public var primaryFilter: SessionFilter? {
    get
    set
  }
  public var filters: [SessionFilter] {
    get
    set
  }
  @objc public var location: CoreLocation.CLLocation?
  public var latitude: Swift.Double? {
    get
  }
  public var longitude: Swift.Double? {
    get
  }
  @objc public var exportedImageURL: Foundation.URL {
    @objc get
  }
  @objc public var dateExported: Foundation.Date? {
    get
  }
  @objc public var isExported: Swift.Bool {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  public func requestThumbnail(boundingSize: CoreGraphics.CGSize, contentMode: ContentMode, filter: SessionFilter? = nil, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc public func invalidateThumbnails()
}
@_inheritsConvenienceInitializers open class SessionFilterPinch : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class PixelSDK {
  public static let shared: PixelSDK
  @objc public static var bundle: Foundation.Bundle {
    @objc get
  }
  @objc public class func setup(_ apiKey: Swift.String)
  public var primaryFilters: [SessionFilter] {
    get
    set
  }
  public var adjustmentFilters: [SessionFilter] {
    get
    set
  }
  public static let defaultStandardFilters: [SessionFilter]
  public static let defaultVisualEffectFilters: [SessionFilter]
  @objc public var apiKey: Swift.String? {
    @objc get
  }
  @objc public var maxVideoDuration: Swift.Int
  @objc public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "primaryFilters")
  public var availablePrimaryFilters: () -> [SessionFilter] {
    get
    set
  }
  @available(*, deprecated, renamed: "adjustmentFilters")
  public var availableAdjustFilters: () -> [SessionFilter] {
    get
    set
  }
  @available(*, deprecated, renamed: "defaultStandardFilters")
  public static var instaFilters: () -> [SessionFilter] {
    get
  }
  @available(*, deprecated, renamed: "defaultVisualEffectFilters")
  public static var visualEffectFilters: () -> [SessionFilter] {
    get
  }
  @available(*, deprecated, renamed: "defaultStandardFilters")
  public static let defaultInstaFilters: [SessionFilter]
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterVignette : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var center: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc public var start: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var end: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSharpness : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterShadows : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterCornerDetection : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SessionFilterCornerDetection")
open class SessionFilterNobleCornerDetection : SessionFilterCornerDetection {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSpeed : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc public var speedMultipliers: [Swift.Double]
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc override open func viewController() -> UIKit.UIViewController
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterTiltShift : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSunset : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
extension CoreGraphics.CGFloat {
  public func translateFromRangeToRange(oldMin: CoreGraphics.CGFloat, oldMax: CoreGraphics.CGFloat, newMin: CoreGraphics.CGFloat, newMax: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
extension Swift.Double {
  public func translateFromRangeToRange(oldMin: Swift.Double, oldMax: Swift.Double, newMin: Swift.Double, newMax: Swift.Double) -> Swift.Double
}
extension Swift.Float {
  public func translateFromRangeToRange(oldMin: Swift.Float, oldMax: Swift.Float, newMin: Swift.Float, newMax: Swift.Float) -> Swift.Float
}
public protocol TopBarProvider {
  var preferredTopBarView: UIKit.UIView? { get }
  func setNeedsTopBarAppearanceUpdate()
}
extension TopBarProvider {
  public var preferredTopBarView: UIKit.UIView? {
    get
  }
}
extension TopBarProvider where Self : UIKit.UIViewController {
  public func setNeedsTopBarAppearanceUpdate()
}
@_inheritsConvenienceInitializers open class SessionFilterExposure : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc public protocol LibraryControllerDelegate {
  @objc optional func libraryControllerDidCancel(_ libraryController: LibraryController)
  @objc optional func libraryController(_ libraryController: LibraryController, didFinishWithSession session: Session, withSegment segment: SessionVideoSegment?)
  @objc optional func libraryController(_ libraryController: LibraryController, willShowEditController editController: EditController, withSession session: Session)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class LibraryController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: LibraryControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var showsEditControllerWhenDone: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var fetchPredicate: Foundation.NSPredicate?
  @_Concurrency.MainActor(unsafe) public var draftMediaTypes: [MediaType] {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var splitVideoDraftsIntoSegments: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIButton! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var nextButton: UIKit.UIButton! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var activityIndicatorView: UIKit.UIActivityIndicatorView! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public let previewCropController: PreviewCropController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
extension LibraryController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension LibraryController : BottomBarProvider {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var prefersBottomBarHidden: Swift.Bool {
    @objc get
  }
}
@_inheritsConvenienceInitializers open class SessionFilterMelrose : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPad5, iPad6, iPad7, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, AppleTV, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: Model {
    get
  }
}
@_inheritsConvenienceInitializers open class SessionFilterGamma : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSphereRefraction : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc public protocol CameraControllerDelegate {
  @objc optional func cameraControllerDidCancel(_ cameraController: CameraController)
  @objc optional func cameraController(_ cameraController: CameraController, didFinishWithSession session: Session)
  @objc optional func cameraController(_ cameraController: CameraController, willShowEditController editController: EditController, withSession session: Session)
  @objc optional func cameraControllerPhotoCameraButtonTouchesBegan(_ cameraController: CameraController)
  @objc optional func cameraControllerPhotoCameraButtonTouchesEnded(_ cameraController: CameraController)
  @objc optional func cameraControllerPhotoCameraButtonTouchesCancelled(_ cameraController: CameraController)
  @objc optional func cameraControllerVideoCameraButtonTouchesBegan(_ cameraController: CameraController)
  @objc optional func cameraControllerVideoCameraButtonTouchesEnded(_ cameraController: CameraController)
  @objc optional func cameraControllerVideoCameraButtonTouchesCancelled(_ cameraController: CameraController)
}
public enum CameraControlButton {
  case cross
  case reverse
  case brightness
  case square
  case flash
  case spacer
  public static func == (a: CameraControlButton, b: CameraControlButton) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class CameraController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: CameraControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var showsEditControllerWhenDone: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var flashActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var frontFacingCameraActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var brightnessAdjustmentActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var faceUpModeAvailable: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var doubleTapForFrontFacingCamera: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var controlButtons: [CameraControlButton] {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var photoCameraButtonView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var videoCameraButtonView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var aspectRatio: CoreGraphics.CGSize? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var videoPreset: AVFoundation.AVCaptureSession.Preset {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var photoSettings: () -> (AVFoundation.AVCapturePhotoSettings) {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Only set aspectRatio now. This variable is no longer needed.")
  @_Concurrency.MainActor(unsafe) public var squareCameraActive: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
extension CameraController : BottomBarProvider {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setNeedsBottomBarAppearanceUpdate()
  @objc @_Concurrency.MainActor(unsafe) dynamic public var preferredBottomBarView: UIKit.UIView? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var prefersBottomBarHidden: Swift.Bool {
    @objc get
  }
}
extension CameraController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var prefersBottomBarTransparent: Swift.Bool {
    @objc get
  }
}
public protocol SessionFilterControllerAdditions {
  func cancel(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  func done(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  var image: SessionImage? { get set }
  var video: SessionVideo? { get set }
  var segment: SessionVideoSegment? { get set }
}
extension SessionFilterControllerAdditions where Self : UIKit.UIViewController {
  public func cancel(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func done(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public var image: SessionImage? {
    get
    nonmutating set
  }
  public var video: SessionVideo? {
    get
    nonmutating set
  }
  public var segment: SessionVideoSegment? {
    get
    nonmutating set
  }
}
@_inheritsConvenienceInitializers open class SessionFilterPolkaDot : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterLaCienega : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SessionVideo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var renderSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc public var videoSegments: [SessionVideoSegment] {
    @objc get
  }
  public var primaryFilter: SessionFilter? {
    get
    set
  }
  public var filters: [SessionFilter] {
    get
    set
  }
  @objc public var duration: CoreMedia.CMTime {
    @objc get
  }
  @objc public var frameDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var speedMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var exportedVideoURL: Foundation.URL {
    @objc get
  }
  @objc public var dateExported: Foundation.Date? {
    get
  }
  @objc public var isExported: Swift.Bool {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterHistogram : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterAbbotKinney : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
public enum GridLinesMode {
  case always
  case interaction
  case never
  public static func == (a: GridLinesMode, b: GridLinesMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PreviewCropController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var defaultsToAspectFillForPortraitMedia: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var defaultsToAspectFillForLandscapeMedia: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var gridLinesMode: GridLinesMode {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public func flashGridLines()
  @_Concurrency.MainActor(unsafe) public var aspectRatio: CoreGraphics.CGSize?
  @objc @_Concurrency.MainActor(unsafe) public var maxRatioForPortraitMedia: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var maxRatioForLandscapeMedia: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var userInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var pausesVideoOnDrag: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc @_Concurrency.MainActor(unsafe) public func layoutMedia()
  @objc deinit
}
extension PreviewCropController : PreviewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewControllerWillDisplayMedia(_ previewController: PreviewController, withSize size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewControllerDidDisplayMedia(_ previewController: PreviewController, withSize size: CoreGraphics.CGSize)
}
extension PreviewCropController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
}
@objc public enum ContentMode : Swift.Int {
  case contentFill
  case contentAspectFit
  case contentAspectFill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PreviewControllerDelegate {
  @objc func previewControllerWillDisplayMedia(_ previewController: PreviewController, withSize size: CoreGraphics.CGSize)
  @objc func previewControllerDidDisplayMedia(_ previewController: PreviewController, withSize size: CoreGraphics.CGSize)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PreviewController : UIKit.UIViewController {
  @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: PreviewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @objc @_Concurrency.MainActor(unsafe) public var session: Session? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentMode: ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var loops: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isMuted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var currentTime: CoreMedia.CMTime {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var initialStartTime: CoreMedia.CMTime? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var autoplayEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isPlaying: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public func play()
  @objc @_Concurrency.MainActor(unsafe) public func pause()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSaturation : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
extension CoreGraphics.CGAffineTransform {
  public static func rotated90Degrees(_ naturalSize: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public static func rotated180Degrees(_ naturalSize: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public static func rotated270Degrees(_ naturalSize: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
}
@_inheritsConvenienceInitializers open class SessionFilterHalftone : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterWarmth : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
extension CoreMedia.CMTime : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SessionVideoSegment : ObjectiveC.NSObject, Swift.Codable {
  @objc public var naturalSize: CoreGraphics.CGSize {
    get
  }
  @objc public var actualSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc public var preferredTransform: CoreGraphics.CGAffineTransform {
    @objc get
    @objc set
  }
  public var cropRect: CoreGraphics.CGRect? {
    get
    set
  }
  @objc public func suggestedCropRect() -> CoreGraphics.CGRect
  public var filters: [SessionFilter] {
    get
    set
  }
  @objc public var trimStartTime: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var trimDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var renderDuration: CoreMedia.CMTime {
    @objc get
  }
  @objc public var duration: CoreMedia.CMTime {
    get
  }
  @objc public var frameDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var speedMultiplier: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var location: CoreLocation.CLLocation?
  public var latitude: Swift.Double? {
    get
  }
  public var longitude: Swift.Double? {
    get
  }
  @objc public var exportedVideoURL: Foundation.URL {
    @objc get
  }
  @objc public var dateExported: Foundation.Date? {
    get
  }
  @objc public var isExported: Swift.Bool {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  public func requestThumbnail(boundingSize: CoreGraphics.CGSize, contentMode: ContentMode, filter: SessionFilter? = nil, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc public func invalidateThumbnails()
  public func generateFrame(time: CoreMedia.CMTime, cropped: Swift.Bool, maximumSize: CoreGraphics.CGSize? = nil) -> UIKit.UIImage?
}
public enum ImageExporterError : Swift.Error, Swift.CustomStringConvertible {
  case cancelled
  case watermarked
  case backgroundState
  case metalSupport
  case destroyed
  case internalError(Swift.Error)
  public var errorDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers public class ImageExporter {
  public static let shared: ImageExporter
  @objc public var isExporting: Swift.Bool {
    @objc get
  }
  public func export(image: SessionImage, compressionQuality: Swift.Float = 0.95, completion: @escaping (ImageExporterError?, UIKit.UIImage?) -> Swift.Void)
  @objc public func export(images: [SessionImage], compressionQuality: Swift.Float = 0.95, progress: ((_ progress: Swift.Double) -> Swift.Void)? = nil, completion: @escaping (Swift.Error?, [UIKit.UIImage]?) -> Swift.Void)
  @objc public func cancelExport()
  @objc deinit
}
public enum SessionInitError : Swift.Error, Swift.CustomStringConvertible {
  case internalError(Swift.Error)
  public var errorDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension Swift.String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum SessionSource : Swift.String {
  case camera
  case library
  case user
  case drafts
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MediaType : Swift.Int {
  case image
  case video
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class Session : ObjectiveC.NSObject, Swift.Codable {
  @objc convenience public init(image: UIKit.UIImage)
  convenience public init(asset: AVFoundation.AVAsset, sessionReady: @escaping (Session?, SessionInitError?) -> ())
  convenience public init(assets: [AVFoundation.AVAsset], sessionReady: @escaping (Session?, SessionInitError?) -> ())
  convenience public init(assets: [AVFoundation.AVAsset], renderSize: CoreGraphics.CGSize? = nil, sessionReady: @escaping (Session?, SessionInitError?) -> ())
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public var image: SessionImage? {
    get
  }
  @objc public var video: SessionVideo? {
    get
  }
  public var mediaType: MediaType {
    get
  }
  @objc public var sessionID: Swift.Int {
    get
  }
  @objc public var dateCreated: Foundation.Date {
    get
  }
  @objc public var dateModified: Foundation.Date {
    get
  }
  public var source: SessionSource {
    get
  }
  @objc public var userInfo: [Swift.AnyHashable : Any]? {
    @objc get
    @objc set
  }
  @objc public var isSaved: Swift.Bool {
    @objc get
  }
  @objc public var isTransient: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var destroyed: Swift.Bool {
    @objc get
  }
  @objc public var hidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func save()
  @objc public func destroy()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterSanVicente : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterHorizontalPerspective : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterVerticalPerspective : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterWilshire : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterHue : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterLuminanceThreshold : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterMulholland : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SessionFilterContrast : SessionFilter {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc override public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc override public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  override public var normalizedIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  @objc override public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc override public var actualIntensityDefault: Swift.Double {
    @objc get
    @objc set
  }
  override public var actualIntensityRange: (Swift.Double, Swift.Double) {
    get
    set
  }
  override open func operation() -> GPUImage.ImageProcessingOperation
  override open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc deinit
}
@objcMembers open class SessionFilter : Swift.Codable {
  @objc required public init()
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
  public class func fromData(_ data: Foundation.Data) throws -> SessionFilter
  @objc public func toData() throws -> Foundation.Data
  public func copy() -> SessionFilter
  @objc public var displayName: Swift.String
  @objc public var version: Swift.String?
  @objc public var distortsOutput: Swift.Bool
  @objc public var cameraThumbnailImage: UIKit.UIImage?
  @objc public var adjustThumbnailImage: UIKit.UIImage?
  @objc open var isActive: Swift.Bool {
    @objc get
  }
  @objc public var normalizedIntensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var normalizedIntensityDefault: Swift.Double {
    @objc get
  }
  public var normalizedIntensityRange: (Swift.Double, Swift.Double)
  @objc public var actualIntensity: Swift.Double {
    @objc get
  }
  @objc public var actualIntensityDefault: Swift.Double
  public var actualIntensityRange: (Swift.Double, Swift.Double)
  open func operation() -> GPUImage.ImageProcessingOperation
  @objc public func updateAllOperations()
  open func operationUpdateNeeded(_ op: GPUImage.ImageProcessingOperation)
  @objc open func viewController() -> UIKit.UIViewController
  @objc deinit
}
extension Swift.Array where Element : SessionFilter {
  public func copy() -> [SessionFilter]
}
extension BottomBarAnimation : Swift.Equatable {}
extension BottomBarAnimation : Swift.Hashable {}
extension Model : Swift.Equatable {}
extension Model : Swift.Hashable {}
extension Model : Swift.RawRepresentable {}
extension CameraControlButton : Swift.Equatable {}
extension CameraControlButton : Swift.Hashable {}
extension GridLinesMode : Swift.Equatable {}
extension GridLinesMode : Swift.Hashable {}
extension ContentMode : Swift.Equatable {}
extension ContentMode : Swift.Hashable {}
extension ContentMode : Swift.RawRepresentable {}
extension SessionSource : Swift.Equatable {}
extension SessionSource : Swift.Hashable {}
extension SessionSource : Swift.RawRepresentable {}
extension MediaType : Swift.Equatable {}
extension MediaType : Swift.Hashable {}
extension MediaType : Swift.RawRepresentable {}
